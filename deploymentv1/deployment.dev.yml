kind: Deployment
apiVersion: apps/v1
metadata:
    name: ${SERVICE_NAME}
    namespace: ${NAME_SPACE}
spec:
  replicas: 1
  revisionHistoryLimit: 5
  selector:
    matchLabels:
      service: ${SERVICE_NAME}
  strategy:
    type: RollingUpdate
    rollingUpdate:
      maxUnavailable: 25%
      maxSurge: 25%
  template:
    metadata:
      name: ${SERVICE_NAME}
      labels:
        service: ${SERVICE_NAME}
    spec:
      containers:
        - name: ${SERVICE_NAME}
          image: $AWS_ACCOUNT_ID.dkr.ecr.$AWS_REGION.amazonaws.com/$SERVICE_NAME:$ENVIRONMENT-$CIRCLE_SHA1
          imagePullPolicy: Always
          env:
            - name: NODE_ENV
              value: development
            - name: PORT
              value: ${CONTAINER_PORT}
            - name: HOST
              value: 0.0.0.0
            - name: DB_DIALECT
              valueFrom:
                secretKeyRef:
                  key: DB_DIALECT
                  name: core-api
            - name: DB_PORT
              valueFrom:
                secretKeyRef:
                  key: DB_PORT
                  name: core-api
            - name: DB_HOST
              valueFrom:
                secretKeyRef:
                  key: DB_HOST
                  name: core-api
            - name: DB_USERNAME
              valueFrom:
                secretKeyRef:
                  key: DB_USERNAME
                  name: core-api
            - name: DB_PASSWORD
              valueFrom:
                secretKeyRef:
                  key: DB_PASSWORD
                  name: core-api
            - name: DB_NAME
              valueFrom:
                secretKeyRef:
                  key: DB_NAME
                  name: core-api
            - name: JWT_SECRET
              valueFrom:
                secretKeyRef:
                  key: JWT_SECRET
                  name: core-api
            - name: JWT_EXPIRATION
              valueFrom:
                secretKeyRef:
                  key: JWT_EXPIRATION
                  name: core-api
          resources:
            limits:
              cpu: 600m
              memory: 400Mi
            requests:
              cpu: 200m
              memory: 300Mi
          ports:
            - name: http
              containerPort: ${CONTAINER_PORT}
          livenessProbe:
            httpGet:
              path: /healthz
              port: ${CONTAINER_PORT}
            initialDelaySeconds: 30
            periodSeconds: 60
            successThreshold: 1
            failureThreshold: 3
          readinessProbe:
            httpGet:
              path: /healthz
              port: ${CONTAINER_PORT}
            initialDelaySeconds: 30
            periodSeconds: 30
            successThreshold: 1
            failureThreshold: 3
---
apiVersion: v1
kind: Service
metadata:
  name: ${SERVICE_NAME}
  namespace: ${NAME_SPACE}
  labels:
    service: ${SERVICE_NAME}
spec:
  ports:
    - name: http
      targetPort: ${CONTAINER_PORT}
      port: 80
  selector:
    service: ${SERVICE_NAME}
